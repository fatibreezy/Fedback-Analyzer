# -*- coding: utf-8 -*-
"""ai_feedback_platform.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RaJYR6Yen9DbFSt3Rmqb2T0kbVFabL_F

Step 1: Define Government Posts with Images
First, we'll define the government posts along with their titles, content, and associated images.
"""

import pandas as pd

# Define government posts
gov_posts = {
    "transportation_subsidy": {
        "title": "N10,000 Transport Allowance for Low-Income Earners",
        "content": "The federal government has approved a monthly transport subsidy of N10,000 to reduce the burden of rising transport costs.",
        "image_url": "https://example.com/transport.jpg"  # Replace with actual image URL
    },
    "digital_training": {
        "title": " 3MTT:Free Digital Skills Training for Nigerian Youths",
        "content": "The Ministry of Innovation is launching training programs in 12 courses nationwide to train Nigeria youths and make Nigeria a net exporter of global talents.",
        "image_url": "https://example.com/training.jpg"  # Replace with actual image URL
    },
    "electricity_tariff": {
        "title": "Revised Electricity Tariffs from July",
        "content": "NERC has announced a new electricity tariff regime set to take effect July 1. Citizens are invited to share feedback.",
        "image_url": "https://example.com/electricity.jpg"  # Replace with actual image URL
    }
}

# Convert to DataFrame for display
gov_df = pd.DataFrame([
    {"Post ID": k, "Title": v["title"], "Content": v["content"], "Image URL": v["image_url"]}
    for k, v in gov_posts.items()
])

gov_df

""" Step 2: Generate Audio Feedback with gTTS
Now, we'll generate audio files simulating citizen feedback for each post.
"""

#  Install Required Libraries
#!pip install gTTS transformers torchaudio librosa --quiet
#!pip install git+https://github.com/openai/whisper.git --quietfrom gtts import gTTS

from gtts import gTTS

# Citizen responses to each post
scripts = {
    "transportation_subsidy": "This N10,000 transport allowance is helpful, but will it really reach the right people?",
    "digital_training": "I'm excited about the free digital training. I hope the trainers are qualified.",
    "electricity_tariff": "Tariff hike again? This will increase the cost of everything. We need a better solution."
}

# Generate audio files
for key, text in scripts.items():
    tts = gTTS(text)
    tts.save(f"{key}.mp3")

print("üéß Audio feedback generated and saved.")

"""Step 3: Transcribe Audio with Whisper
We'll transcribe the generated audio files into text using OpenAI's Whisper model.
"""

!pip install -q git+https://github.com/openai/whisper.git
!sudo apt update && sudo apt install -y ffmpeg

import whisper

# Load the Whisper model
model = whisper.load_model("base")

# Function to transcribe audio
def transcribe_audio(file_path):
    result = model.transcribe(file_path)
    return result['text']

# Transcribe all audio files
transcriptions = {key: transcribe_audio(f"{key}.mp3") for key in scripts}
print("üìù Transcriptions:", transcriptions)

"""Step 4: Perform Sentiment Analysis
We‚Äôll use Hugging Face's transformers pipeline to detect whether the sentiment of each transcription is positive, neutral, or negative.
"""

from transformers import pipeline

# Load the sentiment analysis pipeline
sentiment_pipeline = pipeline("sentiment-analysis")

# Analyze sentiments
sentiments = {key: sentiment_pipeline(text)[0] for key, text in transcriptions.items()}

# Display results
print("üéØ Sentiment Analysis Results:")
for key, sentiment in sentiments.items():
    print(f"{key}: {sentiment}")

"""Step 5: Display Summary Table + Graph

This step will: Create a Pandas DataFrame showing:
The post title,Transcribed feedback,Sentiment label,Sentiment score
Display a bar chart of sentiments for quick visual insight
"""

import pandas as pd
import matplotlib.pyplot as plt

# Prepare the DataFrame again (optional if already exists)
summary = pd.DataFrame({
    "Post Title": list(scripts.keys()),
    "Transcription": list(transcriptions.values()),
    "Sentiment Label": [sentiments[k]['label'] for k in sentiments],
    "Sentiment Score": [sentiments[k]['score'] for k in sentiments]
})

# Set color based on sentiment
colors = summary["Sentiment Label"].map({
    "POSITIVE": "green",
    "NEGATIVE": "red",
    "NEUTRAL": "gray"  # Optional, in case any are neutral
})

# Plotting
plt.figure(figsize=(10, 6))
bars = plt.bar(summary["Post Title"], summary["Sentiment Score"], color=colors)
plt.title("üìà Sentiment Scores by Post", fontsize=14)
plt.xlabel("Government Post", fontsize=12)
plt.ylabel("Sentiment Score", fontsize=12)
plt.ylim(0, 1.1)

# Add sentiment labels above each bar
for bar, label in zip(bars, summary["Sentiment Label"]):
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height + 0.02, label,
             ha='center', va='bottom', fontsize=10, fontweight='bold')

# Rotate x-axis labels to prevent overlap
plt.xticks(rotation=10, ha='right')

plt.tight_layout()
plt.show()

"""Government Post Sample

"""

# Government Posts with Title, Description, and Image
government_posts = {
    "new_tax_reform": {
        "title": "New Tax Reform Bill 2025",
        "description": "The federal government has introduced a tax reform bill targeting VAT and small businesses. The aim is to expand revenue but there are concerns about burdening citizens.",
        "image_url": "https://images.unsplash.com/photo-1588776814546-badf18441c7d"  # Replace with more relevant image if you like
    },
    "3mtt_initiative": {
        "title": "3MTT Digital Skills Initiative",
        "description": "The 3MTT program trained over 30,000 youths in digital skills like Data Analysis, Frontend Development, and more. Government is assessing its workplace impact.",
        "image_url": "https://images.unsplash.com/photo-1618044733300-9685a5f1cd3c"
    },
    "yiedep_employment": {
        "title": "YIEDEP Employment Scheme",
        "description": "YIEDEP targets young entrepreneurs and unemployed youths with interest-free loans and startup support. Feedback on implementation is requested.",
        "image_url": "https://images.unsplash.com/photo-1584467735871-fb4be12d82f9"
    }
}

from IPython.display import display, HTML

def display_government_posts(posts):
    for key, post in posts.items():
        html_block = f"""
        <div style="border:1px solid #ccc; padding:16px; border-radius:10px; margin-bottom:20px;">
            <h2 style="color:#2c3e50;">{post['title']}</h2>
            <img src="{post['image_url']}" style="max-width:100%; height:auto; border-radius:10px; margin-top:10px;">
            <p style="font-size:15px; color:#34495e; margin-top:10px;">{post['description']}</p>
        </div>
        """
        display(HTML(html_block))

display_government_posts(government_posts)

# Updated government posts with working image links
government_posts = {
    "new_tax_reform": {
        "title": "New Tax Reform Bill 2025",
        "description": "The federal government has introduced a tax reform bill targeting VAT and small businesses. The aim is to expand revenue but there are concerns about burdening citizens.",
        "image_url": "https://fiscalreforms.ng/wp-content/uploads/2024/10/Tax-reforms-bill-2048x1146.jpg"
    },
    "3mtt_initiative": {
        "title": "3MTT Digital Skills Initiative",
        "description": "The 3MTT program trained over 30,000 youths in digital skills like Data Analysis, Frontend Development, and more. Government is assessing its workplace impact.",
        "image_url": "https://www.opportunitiesforafricans.com/wp-content/uploads/2023/10/nitda-3mtt.jpg"
    },
    "yiedep_employment": {
        "title": "YIEDEP Employment Scheme",
        "description": "YIEDEP targets young entrepreneurs and unemployed youths with interest-free loans and startup support. Feedback on implementation is requested.",
        "image_url": "https://cdn.pixabay.com/photo/2015/07/17/22/43/student-849825_960_720.jpg"
    }
}

from IPython.display import display, HTML

def display_government_posts(posts):
    for key, post in posts.items():
        html_block = f"""
        <div style="border:1px solid #ccc; padding:16px; border-radius:10px; margin-bottom:20px;">
            <h2 style="color:#2c3e50;">{post['title']}</h2>
            <img src="{post['image_url']}" style="max-width:100%; height:auto; border-radius:10px; margin-top:10px;">
            <p style="font-size:15px; color:#34495e; margin-top:10px;">{post['description']}</p>
        </div>
        """
        display(HTML(html_block))

display_government_posts(government_posts)

"""Step-by-Step: Export to Google Sheets in Colab
Step 1: Install and authenticate
"""

!pip install --upgrade gspread gspread_dataframe oauth2client --quiet
from google.colab import auth
auth.authenticate_user()

"""Step 2: Authorize Google Sheets access"""

import gspread
from google.auth import default

creds, _ = default()
gc = gspread.authorize(creds)

"""Step 3: Save to Google Sheet"""

import pandas as pd
from gspread_dataframe import set_with_dataframe

# Assuming `summary` contains your full feedback summary
sheet_name = "Policy Feedback Summary"
spreadsheet = gc.create(sheet_name)
worksheet = spreadsheet.get_worksheet(0)

# Update sheet with the summary dataframe
set_with_dataframe(worksheet, summary)

print("‚úÖ Data uploaded to Google Sheets successfully!")
print("üîó Open your sheet:", spreadsheet.url)

import pandas as pd
from datetime import datetime

# Simulated user submission
def collect_feedback():
    print("Welcome to the Feedback Portal!\n")

    for post_id, post in gov_posts.items():
        print(f"\nüóûÔ∏è  [{post_id}] {post['title']}")
        print(post['content'])
        print("Do you want to submit feedback to this? (yes/no)")
        choice = input(">> ").strip().lower()

        if choice == 'yes':
            name = input("Enter your name: ")
            response = input("Your feedback: ")
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            submission = {
                "Post ID": post_id,
                "Title": post['title'],
                "Name": name,
                "Feedback": response,
                "Time": timestamp
            }

            feedback_data.append(submission)

# Store responses
feedback_data = []

# Call the function
collect_feedback()

# Convert to DataFrame
feedback_df = pd.DataFrame(feedback_data)
feedback_df.head()

import gspread
from google.auth import default

# Authenticate
creds, _ = default()
gc = gspread.authorize(creds)

# Open Google Sheet
sheet = gc.open("Policy Feedback Summary")  # Use your exact sheet name

# Add a new worksheet if not already there
try:
    worksheet = sheet.worksheet("Text Feedback")
except:
    worksheet = sheet.add_worksheet(title="Text Feedback", rows="1000", cols="20")

# Clear old data (if any)
worksheet.clear()

# Upload new feedback_df
worksheet.update([feedback_df.columns.values.tolist()] + feedback_df.values.tolist())

from transformers import pipeline

# Load sentiment analysis pipeline
sentiment_pipeline = pipeline("sentiment-analysis")

# Run sentiment analysis
feedback_df["Sentiment"] = feedback_df["Feedback"].apply(lambda x: sentiment_pipeline(x)[0]["label"])
feedback_df.head()

grouped = feedback_df.groupby("Title")

for title, group in grouped:
    print(f"\nüóûÔ∏è {title}")
    display(group[["Name", "Feedback", "Sentiment", "Time"]])

# Admin Dashboard Visuals

import matplotlib.pyplot as plt
import seaborn as sns

# === Number of Feedbacks per Government Post ===
plt.figure(figsize=(10,5))
feedback_df["Title"].value_counts().plot(kind="bar", color="dodgerblue")
plt.title("Number of Feedbacks per Government Post")
plt.xlabel("Post Title")
plt.ylabel("Count")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# === Sentiment Breakdown by Post ===
plt.figure(figsize=(10,6))
sentiment_summary = pd.crosstab(feedback_df["Title"], feedback_df["Sentiment"])
sentiment_summary.plot(kind="bar", stacked=True, colormap="RdYlGn", figsize=(10,6))
plt.title("Sentiment Distribution per Post")
plt.xlabel("Government Post")
plt.ylabel("Number of Feedbacks")
plt.xticks(rotation=45, ha='right')
plt.legend(title="Sentiment")
plt.tight_layout()
plt.show()

# === Summary Table ===
summary = feedback_df.groupby("Title").agg({
    "Feedback": "count",
    "Sentiment": lambda x: x.value_counts().idxmax()
}).rename(columns={"Feedback": "Total Feedbacks", "Sentiment": "Top Sentiment"})

summary.reset_index()
